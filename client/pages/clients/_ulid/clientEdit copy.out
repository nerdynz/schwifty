`<template>
  <div class="u-scr u-p" v-if="record">
    <div class="columns is-multiline">
      <div class="column is-12">
        <control label="Company Name" name="CompanyName" type="text" v-model="record.CompanyName" v-validate="'required'"/>
      </div>
      <div class="column is-12">
        <field label="Delivery Address" for="DeliveryAddress" v-validate="'required'" name="DeliveryAddress" :value="record.DeliveryAddress">
          <address-lookup id="DeliveryAddress" :value="record.DeliveryAddress" @change="(val) => { placeChanged(val, 'DeliveryAddress') }" :country="['nz']" class="input" />
        </field>
      </div>
      <div class="column is-12">
        <field label="Billing Address" for="BillingAddress" v-validate="'required'" name="BillingAddress" :value="record.BillingAddress">
          <address-lookup id="BillingAddress" :value="record.BillingAddress" @change="(val) => { placeChanged(val, 'BillingAddress') }" :country="['nz']" class="input" />
        </field>
      </div>
      <div class="column is-12">
        <h5 class="subtitle is-5"><strong>Contacts</strong></h5>
        <b-table v-if="record.Contacts" datakey="ULID" :data="filteredContacts">
          <template slot-scope="props">
            <b-table-column field="Name" label="Name">
              {{ props.row.Name }}
            </b-table-column>
            <b-table-column field="Email" label="Email">
              {{ props.row.Email }}
            </b-table-column>
            <b-table-column field="Phone" label="Phone">
              {{ props.row.Phone }}
            </b-table-column>
            <b-table-column field="IsPrimary" label="Primary Contact">
              <span class="tag" :class="props.row.IsPrimary ? 'is-success' : 'is-warning'">
                <b-checkbox :value="props.row.IsPrimary" @click.native.prevent="uncheckOthers(props.row)"></b-checkbox>
                {{ props.row.IsPrimary ? 'Yes' : 'No' }}
              </span>
            </b-table-column>
            <b-table-column field="IsDeleted" label="Deleted">
              <button class="button is-danger is-small" @click="props.row.IsDeleted = true"><i class="far fa-trash"></i></button>
            </b-table-column>
          </template>
        </b-table>
        <button class="button is-small u-s-mt" @click.prevent="addNewContact">Add New</button>
      </div>
    </div>
    <b-modal :active.sync="isContactModalOpen" has-modal-card scroll="keep">
      <contact-modal type="Customer" :record="currentEditContact" @change="updateContact"></contact-modal>
    </b-modal>
  </div>
</template>

<script>
import {mapGetters, mapActions} from 'vuex'
import {indexByULID} from '~/helpers/filters'
import ContactModal from '~/components/ContactModal'

export default {
  props: {
    isMounted: Boolean,
    customerId: Number
  },
  components: {
    ContactModal
  },
  inject: {
    $validator: '$validator'
  },
  computed: {
    filteredContacts () {
      return this.record.Contacts.filter((c) => {
        return !c.IsDeleted
      })
    },
    routeID () {
      return this.$route.params.ID ? parseInt(this.$route.params.ID) : 0
    },
    custID () {
      if (this.isMounted) {
        return this.customerId
      }
      return this.routeID
    },
    isNewRecord () {
      if (this.custID <= 0) {
        return true
      }
      return false
    },
    buttons () {
      return [
        {text: 'Save', alignment: 'left', kind: 'success', click: this.save, isDisabled: this.$validator.errors.any()},
        {text: 'Save & Return', alignment: 'left', kind: 'success', click: () => { this.save().then(this.back) }, isDisabled: this.$validator.errors.any()},
        {text: 'Back', alignment: 'left', kind: '', click: this.back},
        {text: 'Delete', alignment: 'right', kind: 'danger', click: this.remove}
      ]
    },
    ...mapGetters({
      user: 'auth/user'
    })
  },
  methods: {
    ...mapActions({
      setButtons: 'app/setButtons'
    }),

    uncheckOthers (current) {
      this.record.Contacts.forEach((c) => {
        if (current.ULID === c.ULID) {
          c.IsPrimary = true
        } else {
          c.IsPrimary = false
        }
      })
    },
    placeChanged (addressData, field, id) {
      this.record[field] = addressData
      this.$validator.validateAll([field])
    },

    loadRecord () {
      let loader = this.$loading.open()
      if (this.isNewRecord) {
        this.record = this.$service.new('customer')
        loader.close()
      } else {
        this.$service.retrieve('customer', this.custID, 'contacts', 'yes').then((newRecord) => {
          this.record = newRecord
          loader.close()
        })
      }
    },

    save () {
      var promise = new Promise((resolve, reject) => {
        this.$validator.validateAll(['CompanyName', 'BillingAddress', 'DeliveryAddress']).then((valid) => {
        // this.$validator.validate('Customer.*').then((valid) => {
          if (valid) {
            this.$service.save('customer', this.record).then((newRecord) => {
              this.record = newRecord
              this.$snackbar.open({position: 'is-top', message: `Customer saved successfully`, type: 'is-success'})
              if (this.isMounted) {
              } else {
                this.$router.replace({name: 'customers-ID-customerEdit', params: { 'ID': newRecord['CustomerID'] }})
              }
              resolve(newRecord)
            })
          } else {
            this.$snackbar.open({position: 'is-top', title: 'Failed to save!', message: 'Please double check the fields highlighted.', type: 'is-danger'})
            // reject(new Error('validation'))
          }
        })
      })
      return promise
    },

    back (ev) {
      this.$router.go(-1)
    },

    remove () {
      this.$service.remove('customer', this.record).then(() => {
        this.$snackbar.open({position: 'is-top', message: `Customer removed`, type: 'is-danger'})
        this.back()
      })
    },

    addNewContact () {
      this.openContactModal()
    },

    openContactModal () {
      var contact = this.$service.new('Contact')
      this.currentEditContact = contact
      this.isContactModalOpen = true
    },

    updateContact (contact) {
      let contacts = this.record.Contacts || []
      let index = indexByULID(contacts, contact.ULID)
      if (index >= 0) {
        contacts[index] = contact
      } else {
        contacts.push(contact)
      }
      this.record.Contacts = contacts
    }
  },
  watch: {
    'errors.items' () {
      this.setButtons(this.buttons)
    }
  },
  data () {
    return {
      record: {
        Contacts: []
      },
      chargeGroups: [],
      isContactModalOpen: false,
      currentEditContact: null
    }
  },
  beforeCreate () {
  },
  created () {
    this.loadRecord()
    this.setButtons(this.buttons)
  },
  beforeMount () {
  },
  mounted () {
  },
  beforeUpdate () {
  },
  updated () {
  },
  beforeDestroy () {
  },
  destroyed () {
  }
}
</script>
