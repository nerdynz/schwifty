<template>
  <div v-if="record">
    <div class="">{{ range $i, $col := .Columns}}{{ if not (eq $col.ControlType "") }}<!--
-->
      <field for="{{$col.Name}}" label="{{$col.Label}}"><!--
FIELD START

TEXT
-->{{ if eq $col.ControlType "text" }}
        <b-input label="{{$col.Label}}" name="{{$col.Name}}" type="text" v-model="record.{{$col.Name}}" x-validate="'required'" /><!--
-->{{ end }}<!--

TEXTAREA
-->{{ if eq $col.ControlType "textarea" }}
        <b-input label="{{$col.Label}}" name="{{$col.Name}}" type="textarea" v-model="record.{{$col.Name}}" x-validate="'required'" /><!--
-->{{ end }}<!--

DATETIME
-->{{ if eq $col.ControlType "datetime" }}
        <b-datepicker label="{{$col.Label}}" name="{{$col.Name}}" type="datetime" v-model="record.{{$col.Name}}" x-validate="'required'" /><!--
-->{{ end }}<!--

NUMBER
-->{{ if eq $col.ControlType "number" }}
        <b-input label="{{$col.Label}}" name="{{$col.Name}}" type="number" v-model="record.{{$col.Name}}" x-validate="'required'" /><!--
-->{{ end }}<!--

RICHTEXT
-->{{ if eq $col.ControlType "richtext" }}
        <rich-text name="{{$col.Name}}" v-model="record.{{$col.Name}}" /><!--
-->{{ end }}<!--

IMAGE
-->{{ if eq $col.ControlType "image" }}<field for="{{$col.Name}}" label="{{$col.Label}}">
        <image-upload name="{{$col.Name}}" v-model="record.{{$col.Name}}" /><!--
-->{{ end }}<!--

FIELD END
-->
      </field>{{ end }}{{end}}
    </div>
  </div>
</template>

{{.LTStr}}script{{.GTStr}}
import { mapGetters, mapActions } from 'vuex'

export default {
  components: {
  },
  data () {
    return {
      record: null
    }
  },
  computed: {
    isNewRecord () {
      if (this.routeID {{.LTStr}}= 0) {
        return true
      }
      return false
    },
    routeID () {
      return this.$route.params.ID ? parseInt(this.$route.params.ID) : 0
    },
    buttons () {
      let buttons = [
        { text: 'Save', alignment: 'left', kind: 'success', click: this.save, isDisabled: false },
        { text: 'Save & Return', alignment: 'left', kind: 'success', click: () => { this.save(true) }, isDisabled: false },
        { text: 'Back', alignment: 'left', kind: '', click: this.back }
      ]
      if (this.isNewRecord) {

      } else {
        // cant delete a new record
        buttons.push({ text: 'Delete', alignment: 'right', kind: 'danger', click: this.remove })
      }
      return buttons
    },
    ...mapGetters({
      user: 'app/user'
    })
  },
  watch: {
  },
  beforeCreate () {
  },
  created () {
    this.loadRecord()
    this.setButtons(this.buttons)
  },
  beforeMount () {
  },
  mounted () {
  },
  beforeUpdate () {
  },
  updated () {
  },
  beforeDestroy () {
  },
  destroyed () {
  },
  methods: {
    ...mapActions({
      setButtons: 'app/setButtons',
      siteID: 'auth/siteID'
    }),

    loadRecord () {
      let loader = this.$loader.open()
      if (this.isNewRecord) {
        this.record = this.$service.new('{{.TableNameCamel}}', this.siteID)
        loader.close()
      } else {
        this.$service.retrieve('{{.TableNameCamel}}', this.routeID).then((newRecord) => {
          this.record = newRecord
          loader.close()
        })
      }
    },

    save () {
      let promise = new Promise((resolve, reject) => {
        // eslint-disable-next-line
        if (true) { // todo: validation here
          this.$service.save('{{.TableNameCamel}}', this.record).then((newRecord) => {
            this.record = newRecord
            this.$snackbar.open({ position: 'is-top', message: '{{.TableNameSpaces}} saved successfully', type: 'is-success' })
            if (this.routeID === 0) {
              this.$router.replace({ name: '{{.TableNamePlural}}-ID-{{.TableNameCamel}}Edit', params: { ID: newRecord.{{.TableNameTitle}}ID } })
            }
            resolve(newRecord)
          })
        } else {
          this.$snackbar.open({ position: 'is-top', title: 'Failed to save!', message: 'Please double check the fields highlighted.', type: 'is-danger' })
        }
      })
      return promise
    },

    back (ev) {
      this.$router.go(-1)
    },

    remove () {
      this.$service.remove('{{.TableNameCamel}}', this.record).then(() => {
        this.$toast.open({ message: '{{.TableNameSpaces}} removed', type: 'is-danger' })
        this.back()
      })
    }
  }
}
{{.LTStr}}/script{{.GTStr}}
