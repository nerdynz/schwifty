package actions

import (
		"net/http"
	"github.com/nerdynz/datastore"
	flow "github.com/nerdynz/flow"
)

// NewSetting Route
func NewSetting(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteULID, err := ctx.SiteULID()
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid Site", err)
		return
	}
	settingHelper := models.SettingHelper()
	setting := settingHelper.New(siteULID)
	ctx.JSON(http.StatusOK, setting)
}

// CreateSetting Route
func CreateSetting(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteULID, err := ctx.SiteULID()
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid Site", err)
		return
	}
	settingHelper := models.SettingHelper()
	setting, err := settingHelper.FromRequest(siteULID,ctx.Req)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to create setting record", err)
		return
	}
	err = settingHelper.Save(siteULID,setting)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to create setting record", err)
		return
	}
	ctx.JSON(http.StatusOK, setting)
}

// RetrieveSetting Route
func RetrieveSetting(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteULID, err := ctx.SiteULID()
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid Site", err)
		return
	}
	if ctx.URLParam("settingULID") == "" {
		RetrieveSettings(w, req, ctx, store)
		return
	}

	//get the settingULID from the request
	settingULID := ctx.URLParam("settingULID")
	if settingULID == "" {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid settingULID", nil)
		return
	}

	settingHelper := models.SettingHelper()
	setting, err := settingHelper.Load(siteULID,settingULID)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to retrieve Setting record", err)
		return
	}

	ctx.JSON(http.StatusOK, setting)
}

// RetrieveSettings Route
func RetrieveSettings(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteULID, err := ctx.SiteULID()
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid Site", err)
		return
	}
	settingHelper := models.SettingHelper()
	settings, err := settingHelper.All(siteULID)

	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to retrieve Setting records", err)
		return
	}

	ctx.JSON(http.StatusOK, settings)
}

// PagedSettings Route
func PagedSettings(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteULID, err := ctx.SiteULID()
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid Site", err)
		return
	}
	settingHelper := models.SettingHelper()
	pageNum := ctx.URLIntParamWithDefault("pagenum", 1)
	limit := ctx.URLIntParamWithDefault("limit", 10)
	sort := ctx.URLParam("sort")
	direction := ctx.URLParam("direction")

	data, err := settingHelper.PagedBy(siteULID, pageNum, limit, sort, direction)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Unabled to get paged Setting data", err)
		return
	}
	ctx.JSON(http.StatusOK, data)
}

// UpdateSetting Route
func UpdateSetting(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteULID, err := ctx.SiteULID()
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid Site", err)
		return
	}
	settingHelper := models.SettingHelper()
	setting, err := settingHelper.FromRequest(siteULID, ctx.Req)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to load Setting record for update", err)
		return
	}

	// save and validate
	err = settingHelper.Save(siteULID, setting)
	// other type of error
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Failed to save updated Setting record", err)
		return
	}

	ctx.JSON(http.StatusOK, setting)
}

// DeleteSetting Route
func DeleteSetting(w http.ResponseWriter, req *http.Request, ctx *flow.Context, store *datastore.Datastore) {
	siteULID, err := ctx.SiteULID()
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError, "Invalid Site", err)
		return
	}
	settingHelper := models.SettingHelper()
	//get the settingULID from the request
	settingULID := ctx.URLParam("settingULID")
	if settingULID == "" {
		ctx.JSON(http.StatusInternalServerError, "Invalid SettingID for remove")
		return
	}

	isDeleted, err := settingHelper.Delete(siteULID, settingULID)
	if err != nil {
		ctx.ErrorJSON(http.StatusInternalServerError,"Failed to remove the Setting record", err)
		return
	}
	ctx.JSON(http.StatusOK, isDeleted)
}



	r.GET("/:api/v1/setting/new", actions.NewSetting, security.Disallow)
	r.PST("/:api/v1/setting/create", actions.CreateSetting, security.Disallow)
	r.GET("/:api/v1/setting/retrieve", actions.RetrieveSettings, security.Disallow)
	r.GET("/:api/v1/setting/retrieve/:settingULID", actions.RetrieveSetting, security.Disallow)
	r.GET("/:api/v1/setting/paged/:sort/:direction/limit/:limit/pagenum/:pagenum", actions.PagedSettings, security.Disallow)
	r.PUT("/:api/v1/setting/update/:settingULID", actions.UpdateSetting, security.Disallow)
	r.DEL("/:api/v1/setting/delete/:settingULID", actions.DeleteSetting, security.Disallow)
	
	
